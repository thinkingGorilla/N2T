// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
	// Replace this comment with your code.

    // 메모리가 가질 수 있는 주소의 개수는 2^15
    // RAM16K가 가질 수 있는 주소의 개수는 2^14
    // 스크린 메모리 맵이 가질 수 있는 주소의 개수는 2^13
    // 키보드 메모리 맵이 가질 수 있는 주소의 개수는 2^0

    // 메모리의 마지막 비트를 사용하여 RAM16K와 Memory-mapped I/O를 구분한다.
    DMux(in=load, sel=address[14], a=selr16k, b=seliomm);

    // 메모리의 마지막 비트의 이전 비트를 사용하여 Memory-mapped I/O에서 스크린과 키보드를 구분한다.
    DMux(in=seliomm, sel=address[13], a=selscrn, b=selkybd);

    // 메모리에서 받은 주소에서 최상위 비트는 RAM16K와 Memory-mapped I/O를 구분하는데 사용하였으므로 나머지 비트들을 주소로 넘긴다.
    RAM16K(in=in, load=selr16k, address=address[0..13], out=r16kout);

    // 메모리에서 받은 주소에서 마지막 비트의 이전 비트를 Memory-mapped I/O를 구분하는데 사용하였으므로 나머지 비트들을 주소로 넘긴다.
    Screen(in=in, load=selscrn, address=address[0..12], out=scrnout);

    // 키보드는 출력만한다.
    Keyboard(out=kybdout);

    // Memory-mapped I/O 중 출력할 I/O를 선택한다.
    Mux16(a=scrnout, b=kybdout, sel=address[13], out=iommout);

    // RAM16K와 Memory-mapped I/O 중 출력할 것을 선택한다.
    Mux16(a=r16kout, b=iommout, sel=address[14], out=out);
}