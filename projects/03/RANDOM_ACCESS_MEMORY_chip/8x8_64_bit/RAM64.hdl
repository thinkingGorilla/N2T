// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load, sel=address[0..2], a=r8A, b=r8B, c=r8C, d=r8D, e=r8E, f=r8F, g=r8G, h=r8H);
    RAM8(in=in, load=r8A, address=address[3..5], out=a);
    RAM8(in=in, load=r8B, address=address[3..5], out=b);
    RAM8(in=in, load=r8C, address=address[3..5], out=c);
    RAM8(in=in, load=r8D, address=address[3..5], out=d);
    RAM8(in=in, load=r8E, address=address[3..5], out=e);
    RAM8(in=in, load=r8F, address=address[3..5], out=f);
    RAM8(in=in, load=r8G, address=address[3..5], out=g);
    RAM8(in=in, load=r8H, address=address[3..5], out=h);
    Mux8Way16(a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h, sel=address[0..2], out=out);
}